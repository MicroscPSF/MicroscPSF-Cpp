From de3cda8744e89b65b186b721853a611eb8d505cd Mon Sep 17 00:00:00 2001
From: Antony Chan <antony.sigma@gmail.com>
Date: Tue, 26 Nov 2024 17:23:16 -0800
Subject: [PATCH] Patch armadillo to support besselj

---
 include/armadillo_bits/eop_aux.hpp | 20 ++++++++++++++++++--
 1 file changed, 18 insertions(+), 2 deletions(-)

diff --git a/include/armadillo_bits/eop_aux.hpp b/include/armadillo_bits/eop_aux.hpp
index b63eba6..8da912b 100644
--- a/include/armadillo_bits/eop_aux.hpp
+++ b/include/armadillo_bits/eop_aux.hpp
@@ -20,6 +20,9 @@
 //! @{
 
 
+#ifdef BOOST_HAS_BESSEL
+#include <boost/math/special_functions/bessel.hpp>
+#endif
 
 //! use of the SFINAE approach to work around compiler limitations
 //! http://en.wikipedia.org/wiki/SFINAE
@@ -138,8 +141,21 @@ class eop_aux
   
   template<typename T1, typename T2> arma_inline static typename   arma_integral_only<T1>::result pow (const T1 base, const T2 exponent) { return T1( std::pow( double(base), double(exponent) ) ); }
   template<typename T1, typename T2> arma_inline static typename arma_real_or_cx_only<T1>::result pow (const T1 base, const T2 exponent) { return T1( std::pow(        base,         exponent  ) ); }
-  
-  
+
+// Wrap the scalar Bessel function of the first kind. Enable 32-bit and 64-bit
+// algorithm.
+template <uint8_t order, typename eT>
+arma_inline static typename arma_real_only<eT>::result
+besselj(const eT x) {
+#ifdef STD_HAS_BESSEL
+    using std::cyl_bessel_j;
+#elif defined(BOOST_HAS_BESSEL)
+    using boost::math::cyl_bessel_j;
+#endif
+    return cyl_bessel_j(double(order), x);
+}
+
+
   template<typename eT>
   arma_inline
   static
-- 
2.25.1

